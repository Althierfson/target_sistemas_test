// Mocks generated by Mockito 5.4.3 from annotations
// in target_sistemas_test/test/presentation/mobx/notes/notes_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:target_sistemas_test/core/failures.dart' as _i6;
import 'package:target_sistemas_test/domain/repositories/notes/notes_repository.dart'
    as _i2;
import 'package:target_sistemas_test/domain/usecases/notes/fetch_notes.dart'
    as _i4;
import 'package:target_sistemas_test/domain/usecases/notes/save_notes.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotesRepository_0 extends _i1.SmartFake
    implements _i2.NotesRepository {
  _FakeNotesRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchNotes].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchNotes extends _i1.Mock implements _i4.FetchNotes {
  @override
  _i2.NotesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNotesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeNotesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NotesRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
            _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}

/// A class which mocks [SaveNotes].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveNotes extends _i1.Mock implements _i7.SaveNotes {
  @override
  _i2.NotesRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNotesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeNotesRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NotesRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> call(List<String>? list) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [list],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
            _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [list],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                _FakeEither_1<_i6.Failure, List<String>>(
          this,
          Invocation.method(
            #call,
            [list],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}
